name: Django CI/CD with Docker and Kind

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: stano254/todoapp
  KUBECONFIG: ${{ github.workspace }}/kubeconfig
  NODE_PORT: 30080

jobs:
  ci-cd:
    runs-on: self-hosted
    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v3

      - name: 🐍 Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 📦 Install Dependencies & Run Tests
        run: |
          pip install -r requirements.txt
          python manage.py test

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🐳 Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    needs: ci-cd
    runs-on: [self-hosted, linux]
    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v3

      - name: ⚙️ Load Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig

      - name: 🔁 Recreate Deployment and Service
        run: |
          set -e
          echo "🧹 Deleting old deployment and service if they exist..."
          kubectl delete deployment todoapp-deployment --ignore-not-found
          kubectl delete svc todoapp-service --ignore-not-found
          
          echo "🚀 Applying new deployment and service..."
          kubectl apply -f k8s/deployment.yml
          kubectl apply -f k8s/service.yml
          
          echo "⏳ Waiting for pods to be ready..."
          kubectl rollout status deployment/todoapp-deployment --timeout=3600s
          kubectl wait --for=condition=ready pod -l app=todoapp --timeout=3600s
      

      - name: ✅ Confirm Pod Running
        run: kubectl get pods -l app=todoapp


      - name: 🌍 Test Localhost and LAN Accessibility
        run: |
          sleep 120
          kubectl get pods -o wide
          kubectl get svc
          kubectl wait --for=condition=ready pod -l app=todoapp --timeout=120s
          echo "Testing on secondary laptop:"
          curl --fail http://localhost:${{ env.NODE_PORT }} || (kubectl logs -l app=todoapp --tail=50 && echo "❌ Localhost unreachable" && exit 1)
          HOST_IP=$(hostname -I | awk '{print $1}')
          echo "📡 Try accessing from primary at: http://$HOST_IP:${{ env.NODE_PORT }}"


